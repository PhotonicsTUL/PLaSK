#ifndef PLASK__CONFIG_H
#define PLASK__CONFIG_H

// We use boost::shared_ptr, as otherwise boost::python fails
#undef PLASK_SHARED_PTR_STD

// Math library to use
#define PLASK_MATH_STD

// Fortran name mangling
#cmakedefine CMAKE_Fortran_COMPILER_WORKS
#ifdef CMAKE_Fortran_COMPILER_WORKS
#   include "f77.h" // Fortran name mangling scheme
#else // Use most probable mangling
#    define F77_GLOBAL(name,NAME) name##_
#    define F77_GLOBAL_(name,NAME) name##_
#    define F77_MODULE(mod_name,name, mod_NAME,NAME) __##mod_name##_MOD_##name
#    define F77_MODULE_(mod_name,name, mod_NAME,NAME) __##mod_name##_MOD_##name
#endif
#if defined(_WIN32) || defined(__WIN32__) || defined(WIN32)
#    define F77SUB extern "C" __declspec(dllimport) void
#    define F77FUN(RT) extern "C" __declspec(dllimport) RT
#else
#    define F77SUB extern "C" void
#    define F77FUN(RT) extern "C" RT
#endif

// OpenMP
#cmakedefine OPENMP_FOUND

// Print stack-trace on stderr when plask::Exception is throwed (works only in debug mode)
#ifndef NDEBUG
#cmakedefine PRINT_STACKTRACE_ON_EXCEPTION
#ifdef PRINT_STACKTRACE_ON_EXCEPTION
#cmakedefine BACKWARD_HAS_DW 1
#cmakedefine BACKWARD_HAS_BFD 1
#endif
#endif



//
// The following block is the standard way of creating macros which make exporting
// from a DLL simpler. All files within this DLL are compiled with the PLASK_EXPORTS
// symbol defined on the command line. this symbol should not be defined on any project
// that uses this DLL. This way any other project whose source files include this file see
// Net_API functions as being imported from a DLL, wheras this DLL sees symbols
// defined with this macro as being exported.
//
#if defined(_WIN32) && defined(PLASK_EXPORTS)
    #if defined(Net_EXPORTS)
        #define PLASK_API __declspec(dllexport)
    #else
        #define PLASK_API __declspec(dllimport)
    #endif
#endif

#if !defined(PLASK_API)
    #define PLASK_API
#endif



#endif // PLASK__CONFIG_H
// kate: syntax c++;
