#ifndef PLASK__CONFIG_H
#define PLASK__CONFIG_H

// We use boost::shared_ptr, as otherwise boost::python fails
#undef PLASK_SHARED_PTR_STD

// Math library to use
#define PLASK_MATH_STD

// optional library to use (c++17 std or boost)
#cmakedefine PLASK_OPTIONAL_STD

// Fortran name mangling
#cmakedefine CMAKE_Fortran_COMPILER_WORKS
#ifdef CMAKE_Fortran_COMPILER_WORKS
#    include "f77.h" // Fortran name mangling scheme
#else // Use most probable mangling
#    define F77_GLOBAL(name,NAME) name##_
#    define F77_GLOBAL_(name,NAME) name##_
#    define F77_MODULE(mod_name,name, mod_NAME,NAME) __##mod_name##_MOD_##name
#    define F77_MODULE_(mod_name,name, mod_NAME,NAME) __##mod_name##_MOD_##name
#endif
#if defined(_WIN32) || defined(__WIN32__) || defined(WIN32)
#    define F77SUB extern "C" __declspec(dllimport) void
#    define F77FUN(RT) extern "C" __declspec(dllimport) RT
#else
#    define F77SUB extern "C" void
#    define F77FUN(RT) extern "C" RT
#endif

// OpenMP
#cmakedefine OPENMP_FOUND

// Print stack-trace on stderr when plask::Exception is throwed (works only in debug mode)
#ifndef NDEBUG
#cmakedefine PRINT_STACKTRACE_ON_EXCEPTION
#ifdef PRINT_STACKTRACE_ON_EXCEPTION
#cmakedefine BACKWARD_HAS_DW 1
#cmakedefine BACKWARD_HAS_BFD 1
#endif
#endif

// License check
#cmakedefine LICENSE_CHECK

// Export fmt symbols in libplask (affects only windows)
// #cmakedefine PLASK_EXPORTS_FMT

//
// The following block is the standard way of creating macros which make exporting
// from a DLL simpler. All files within this DLL are compiled with the PLASK_EXPORTS (/PLASK_SOLVERS_EXPORTS)
// symbol defined on the command line. this symbol should not be defined on any project
// that uses this DLL. This way any other project whose source files include this file see
// PLASK_API (/PLASK_SOLVER_API) functions as being imported from a DLL, wheras this DLL sees symbols
// defined with this macro as being exported.
//
#if defined(_WIN32) || defined(__WIN32__) || defined(WIN32)
    #if defined(PLASK_EXPORTS)
        #define PLASK_API __declspec(dllexport)
        //#define PLASK_API_EXTERN_TEMPLATE_INSTANTION_STRUCT(...) extern template struct __VA_ARGS__ ;
        //#define PLASK_API_EXTERN_TEMPLATE_INSTANTION_CLASS(...) extern template class __VA_ARGS__ ;
        #define PLASK_API_EXTERN_TEMPLATE_SPECIALIZATION_STRUCT(...)    // for structs which aren't PLASK_API
        #define PLASK_API_EXTERN_TEMPLATE_SPECIALIZATION_CLASS(...)     // for classes which aren't PLASK_API
      //#if defined(PLASK_EXPORTS_FMT) && !defined(FMT_EXPORT)
      //  #define FMT_EXPORT
      //#endif
    #else
        #define PLASK_API __declspec(dllimport)
        #define PLASK_API_EXTERN_TEMPLATE_SPECIALIZATION_STRUCT(...) extern template struct __declspec(dllimport) __VA_ARGS__ ; // for structs which aren't PLASK_API
        #define PLASK_API_EXTERN_TEMPLATE_SPECIALIZATION_CLASS(...) extern template class __declspec(dllimport) __VA_ARGS__ ;   // for classes which aren't PLASK_API
      //#if defined(PLASK_EXPORTS_FMT) && !defined(FMT_SHARED)
      //  #define FMT_SHARED
      //#endif
    #endif
    #define PLASK_API_EXTERN_TEMPLATE_STRUCT(...)   // for structs which are PLASK_API
    #define PLASK_API_EXTERN_TEMPLATE_CLASS(...)    // for classes which are PLASK_API

    #if defined(PLASK_SOLVERS_EXPORTS)
        #define PLASK_SOLVER_API __declspec(dllexport)
    #else
        #define PLASK_SOLVER_API __declspec(dllimport)
    #endif
    #define PLASK_SOLVER_API_EXTERN_TEMPLATE_STRUCT(...)
    #define PLASK_SOLVER_API_EXTERN_TEMPLATE_CLASS(...)

    #if defined(PLASK_PYTHON_EXPORTS)
        #define PLASK_PYTHON_API __declspec(dllexport)
    #else
        #define PLASK_PYTHON_API __declspec(dllimport)
    #endif
    #define PLASK_PYTHON_API_EXTERN_TEMPLATE_STRUCT(...)
    #define PLASK_PYTHON_API_EXTERN_TEMPLATE_CLASS(...)
#else
    // extern templates does not work well with dllexport/dllimport and so we can't used it at win32
    #define PLASK_USE_EXTERN_TEMPLATES
#endif



#ifndef PLASK_API
    #define PLASK_API
#endif

#ifndef PLASK_API_EXTERN_TEMPLATE_STRUCT
    #define PLASK_API_EXTERN_TEMPLATE_STRUCT(...) extern template struct __VA_ARGS__ ;
#endif

#ifndef PLASK_API_EXTERN_TEMPLATE_CLASS
    #define PLASK_API_EXTERN_TEMPLATE_CLASS(...) extern template class __VA_ARGS__ ;
#endif

#ifndef PLASK_API_EXTERN_TEMPLATE_SPECIALIZATION_STRUCT
    #define PLASK_API_EXTERN_TEMPLATE_SPECIALIZATION_STRUCT(...) extern template struct __VA_ARGS__ ;
#endif

#ifndef PLASK_API_EXTERN_TEMPLATE_SPECIALIZATION_CLASS
    #define PLASK_API_EXTERN_TEMPLATE_SPECIALIZATION_CLASS(...) extern template class __VA_ARGS__ ;
#endif


#ifndef PLASK_SOLVER_API
    #define PLASK_SOLVER_API
#endif

#ifndef PLASK_SOLVER_API_EXTERN_TEMPLATE_STRUCT
    #define PLASK_SOLVER_API_EXTERN_TEMPLATE_STRUCT(...) extern template struct __VA_ARGS__ ;
#endif

#ifndef PLASK_SOLVER_API_EXTERN_TEMPLATE_CLASS
    #define PLASK_SOLVER_API_EXTERN_TEMPLATE_CLASS(...) extern template class __VA_ARGS__ ;
#endif



#ifndef PLASK_PYTHON_API
    #define PLASK_PYTHON_API
#endif

#ifndef PLASK_PYTHON_API_EXTERN_TEMPLATE_STRUCT
    #define PLASK_PYTHON_API_EXTERN_TEMPLATE_STRUCT(...) extern template struct __VA_ARGS__ ;
#endif

#ifndef PLASK_PYTHON_API_EXTERN_TEMPLATE_CLASS
    #define PLASK_PYTHON_API_EXTERN_TEMPLATE_CLASS(...) extern template class __VA_ARGS__ ;
#endif


#ifdef DOXYGEN
    #define PLASK_UNUSED(arg) arg
#else
    #define PLASK_UNUSED(arg)
#endif


#endif // PLASK__CONFIG_H
// kate: syntax c++;
