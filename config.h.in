#ifndef PLASK__CONFIG_H
#define PLASK__CONFIG_H

// PLaSK version
#define PLASK_VERSION_MAJOR ${VERSION_MAJOR}
#define PLASK_VERSION_MINOR ${VERSION_MINOR}
#define PLASK_VERSION "${VERSION}"

// Declare shared pointer to use
// (when boost::python gets compatibile with std::shared_ptr, check boost version and use std if possible)
#include <boost/shared_ptr.hpp>
namespace plask {
    using boost::shared_ptr;
    using boost::dynamic_pointer_cast;
}


// Math library
#include <cmath>

// Complex numbers library
#include <complex>
namespace plask {
    using std::complex; using std::conj;
    typedef complex<double> dcomplex;
}


// Limist for comparing approximate numbers with zero
#include <limits>
namespace plask {
    const double SMALL = std::numeric_limits<double>::epsilon();
    const double SMALL2 = SMALL*SMALL;

    /// Check if an approximate number is zero
    inline bool is_zero(double v) {
        return abs(v) < SMALL;
    }

    /// Check if an approximate number is zero
    inline bool is_zero(dcomplex v) {
        return real(v)*real(v) + imag(v)*imag(v) < SMALL2;
    }
}

#endif // PLASK__CONFIG_H
// kate: syntax c++;
