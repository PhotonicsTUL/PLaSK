#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass scrreprt
\begin_preamble
\usepackage{xcolor}
\usepackage{amsbsy}

%keywordstyle={\pmb}

\clubpenalty=10000
\widowpenalty=10000
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman utopia
\font_sans default
\font_typewriter lmtt
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement h
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_title "PLaSK User Manual"
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize a4paper
\use_geometry true
\use_amsmath 1
\use_esint 0
\use_mhchem 0
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Indeks
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2.4cm
\footskip 1.2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\listings_params "backgroundcolor={\color{gray!3}},basicstyle={\ttfamily\small},columns=fullflexible,commentstyle={\it},frame=shadowbox,keepspaces=true,language=Python,rulesepcolor={\color{gray}},showstringspaces=false"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
PLaSK User Guide
\end_layout

\begin_layout Date
v.
 0.1
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Chapter
Preface
\end_layout

\begin_layout Standard

\series bold
P
\series default
hotonic 
\series bold
La
\series default
ser 
\series bold
S
\series default
imulation 
\series bold
K
\series default
it is a comprehensive tool for numerical analysis of broad range of physical
 phenomena in photonic devices.
 It has been designed for simulating mainly semiconductor lasers, however
 the range of the covered devices is much larger and includes e.g.
 transistors, light emitting diodes, photodetectors, etc.
 Due to its modular nature it is possible to perform computations of virtually
 any physical phenomenon in micro-scale structures.
\end_layout

\begin_layout Standard
PLaSK has been originally developed in a Photonics Group of Lodz Institute
 of Technology, which has many-year experience in numerical analysis of
 semiconductor lasers.
 Such structures, due to their complex structure, often fail to be correctly
 simulated by popular general-purpose software.
 However, in designing PLaSK we have taken special care to consider all
 the special cases of semiconductor lasers and to choose (or invent where
 necessary) appropriate algorithms.
\end_layout

\begin_layout Standard
This manual presents the software and gives instructions on using it.
 It is structured as follows: First there is a quick start guide, which
 gives brief overview on the whole software, instructs how to install it,
 and introduces its main features in a form of short tutorials and examples.
 The second part describes in detail all the elements of the input data
 file and presents complete manual of all the general features available
 in the software.
 The third part covers usage of graphical user interface and, finally, the
 last part lists all the default computational solvers and gives the complete
 reference to their usage.
\end_layout

\begin_layout Part
Quick start guide
\end_layout

\begin_layout Chapter
Introduction
\end_layout

\begin_layout Section
Installation
\end_layout

\begin_layout Subsection
Windows
\end_layout

\begin_layout Standard
Just unzip provided file to the folder of your choice.
 The full installer will be provided in some distant future.
\end_layout

\begin_layout Subsection
Linux systems
\end_layout

\begin_layout Subsubsection
DEB based distros (Debian, Ubuntu, Mint, etc.)
\end_layout

\begin_layout Standard
Run the following commands:
\begin_inset listings
lstparams "language=bash"
inline false
status open

\begin_layout Plain Layout

$ sudo apt-get g++ libboost-all-dev libexpat1-dev subversion cmake 
\backslash

\end_layout

\begin_layout Plain Layout

  cmake-qt-gui doxygen libeigen3-dev libopenblas-dev liblapack-dev 
\backslash

\end_layout

\begin_layout Plain Layout

  liblapacke-dev libfftw3-dev python python-numpy python-scipy 
\backslash

\end_layout

\begin_layout Plain Layout

  python-matplotlib python-h5py python-pyside python-ipython
\end_layout

\begin_layout Plain Layout

$ cd TwÃ³j/wybrany/katalog/na/projekt
\end_layout

\begin_layout Plain Layout

$ svn checkout https://phys.p.lodz.pl/svn/plask/trunk .
\end_layout

\begin_layout Plain Layout

$ mkdir build
\end_layout

\begin_layout Plain Layout

$ cd build
\end_layout

\begin_layout Plain Layout

$ cmake ..
\end_layout

\begin_layout Plain Layout

$ make -j4
\end_layout

\begin_layout Plain Layout

$ sudo make install
\end_layout

\end_inset


\end_layout

\begin_layout Standard
And so far that's all.
\end_layout

\begin_layout Subsubsection
RPM based distros
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Running-plask"

\end_inset

Running plask
\end_layout

\begin_layout Standard
In general PLaSK is standalone command line program.
 It can be run from the command line by typing 
\family typewriter
plask
\family default
 in the shell
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
To be able to do so on Windows, you must add the folder 
\family typewriter
bin
\family default
 from the PLaSK install folder (e.g.
 
\family typewriter
c:
\backslash
Program
\begin_inset space \thinspace{}
\end_inset


\begin_inset space \thinspace{}
\end_inset

Files
\begin_inset space \thinspace{}
\end_inset


\backslash
PLaSK
\backslash
bin
\family default
) to the environment variable Path.
\end_layout

\end_inset

.
 If run without any parameter, it will open a simple interactive shell where
 you can type Python commands for immediate execution.
 In order to run prepared script (saved either in 
\family typewriter
.xpl
\family default
 or 
\family typewriter
.py
\family default
 file) simply add its name as the first parameter.
 Further parameters are optional and will be available to the Python script
 as 
\family typewriter
sys.argv
\family default
.
 In the following example 
\family typewriter
vcsel.xpl
\family default
 is the input file an 10 some parameter:
\end_layout

\begin_layout Standard
In Linux shell or MACOS terminal:
\begin_inset listings
lstparams "language=bash"
inline false
status open

\begin_layout Plain Layout

joe@cray:~/laser$ plask vcsel.xpl 10
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In Windows from the Command Prompt:
\begin_inset listings
lstparams "language=bash"
inline false
status open

\begin_layout Plain Layout

C:
\backslash
Users
\backslash
joe
\backslash
laser> "C:
\backslash
Program Files
\backslash
PLaSK
\backslash
bin
\backslash
plask.exe" vcsel.xpl 10
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Such command-line invocation can be used to run PLaSK locally, but is also
 useful in HPC clusters with any kind of batch queue.
 In the latter case make sure that you provide the command 
\family typewriter
plask
\family default
 
\emph on
your_file.xpl
\emph default
 to the queue, adding absolute or relative paths to files where necessary.
 PLaSK looks for all its system files in location relative to the main binary,
 so there is no need to install it in a default system locations (although
 this is recommended).
 The following example shows how to add the command to the queue in a popular
 batch system Torque (it is assumed that PLaSK is installed in user home
 directory in the subdirectory 
\family typewriter
plask
\family default
):
\begin_inset listings
lstparams "language=bash"
inline false
status open

\begin_layout Plain Layout

joe@cray:~$ echo $HOME/plask/bin/plask laser/vcsel.xpl 10 | qsub -N vcsel
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In Windows there is a 
\family typewriter
PLaSK.bat
\family default
 file provided in the ZIP archive to make it easier to run the binary from
 the Explorer.
 Simply double-click its icon to open the interactive shell, or drag the
 input file to run the saved script.
\end_layout

\begin_layout Standard
The alternative method of running PLaSK will be by using launcher system
 in the graphical user interface.
 However, such a system is not implemented at the present moment.
\end_layout

\begin_layout Chapter
Tutorials and examples
\end_layout

\begin_layout Section
Thermo-electrical modeling of simple edge-emitting diode
\end_layout

\begin_layout Standard
This tutorial presents basic usage of PLaSK.
 It shows how to define the basic geometry and how to perform computations
 using solvers.
 During the tutorial creation of all parts of the input file is described
 step-by-step, together with the discussion of it meaning.
 Before starting following the instructions described here, please make
 sure that PLaSK is installed correctly and create a separate working directory
 for the data and the results.
 We assume that you are able to launch the main binary as described in section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Running-plask"

\end_inset

.
 In order to begin, you need to open your favorite text editor and create
 a file named 
\family typewriter
tutorial1.xpl
\family default
.
 Save it (an empty file at the moment) in the directory you have just created.
\end_layout

\begin_layout Standard
In general, PLaSK uses XML as a format of its input files.
 By default they have standard extension 
\family typewriter
.xpl
\family default
 (which you may consider as a shortcut from 
\series bold

\begin_inset Quotes eld
\end_inset

X
\series default
ML in 
\series bold
PL
\series default
aSK
\begin_inset Quotes erd
\end_inset

).
 They contain definition of custom materials, analyzed structure geometry,
 configuration of the computational solvers and a Python script defining
 the step-by-step operations to perform during computations.
 However, it is a common situation that these operations remain the same
 for a
\begin_inset space ~
\end_inset

large number of different analyzed devices.
 Hence, it is possible to save them in a separate file with an extension
 
\family typewriter
.py
\family default
 that is just a Python script and use the XPL only for definition of the
 structure
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Actually it is possible to run the computations without creating XPL file
 at all, as everything can be defined using Python, however, this option
 will be presented later.
\end_layout

\end_inset

.
 We will demonstrate such option in the next tutorial in section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Thermo-electrical-of-GaAs"

\end_inset

.
\end_layout

\begin_layout Standard
In XML every element is described by 
\emph on
tags
\emph default
, which are denoted by 
\family typewriter
<
\family default
â¦
\family typewriter
>
\family default
 brackets.
 Tags always have some name and may optionally contain some attributes and
 content.
 Attributes are always put together with the tag name inside the 
\family typewriter
<
\family default
â¦
\family typewriter
>
\family default
 brackets, i.e.
 
\family typewriter
<tag attr1="value1" attr2="value2">
\family default
.
 On the other hand, the tag content is always put after the brackets and
 must end with the 
\family typewriter
</tag>
\family default
 element.
 Inside the tag content you may put text or some other tags, depending on
 the kind of input you want (and more importantly may) to enter.
 If a tag does not have any content, this must be indicated by putting the
 
\family typewriter
/
\family default
 character before the closing bracket (i.
\begin_inset space \thinspace{}
\end_inset

e.
 
\family typewriter
<tag/>
\family default
).
 Tag attributes are still allowed in such a case.
\end_layout

\begin_layout Standard
After reading this very brief introduction to XML syntax, you start writing
 your first PLaSK input file.
 First you have to define the main tag 
\family typewriter
<plask>
\family default
.
 Everything you write will be the content of this tag:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=XML"
inline false
status open

\begin_layout Plain Layout

<plask>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  <!-- Here you will put all the content of your file.
 -->
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

</plask>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The strange characters 
\family typewriter
<!--
\family default
 and 
\family typewriter
-->
\family default
 in the above example mark the beginning and the end of the comment, respectivel
y.
 So you van use them in your file to write your notes, or to temporarily
 disable any part of the file.
 
\end_layout

\begin_layout Standard
Inside the main tag you may define the following sections: 
\family typewriter
materials
\family default
, 
\family typewriter
geometry
\family default
, 
\family typewriter
grids
\family default
, 
\family typewriter
solvers
\family default
, 
\family typewriter
connects
\family default
, and 
\family typewriter
script
\family default
.
 All these sections are optional, however, if present, they must follow
 in the order specified above.
 You will learn the roles of these sections in this and the following tutorials.
 In details, they are described in Part
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "part:PLaSK-reference-manual"

\end_inset

 of this manual.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename tutorial1-geometry.svg

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:tutorial1-geometry"

\end_inset

Simple edge-emitting gallium-arsenide diode modeled in 
\family typewriter
tutorial1.xpl
\family default
 file.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Geometry
\end_layout

\begin_layout Standard
In this tutorial we start with the geometry section.
 It describes the geometry of the structure.
 We want to define a
\begin_inset space ~
\end_inset

simple gallium arsenide edge-emitting diode, presented in Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:tutorial1-geometry"

\end_inset

.
 It can be modeled as a two-dimensional Cartesian structure, hence, we begin
 by specifying the 
\emph on
geometry
\emph default
 section and Cartesian two-dimensional geometry type:
\begin_inset listings
lstparams "language=XML"
inline false
status open

\begin_layout Plain Layout

<plask>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

<geometry>
\end_layout

\begin_layout Plain Layout

  <cartesian2d axes="xy" left="mirror" name="main">
\end_layout

\begin_layout Plain Layout

    <!-- Here we put the geometry definition.
 -->
\end_layout

\begin_layout Plain Layout

  </cartesian2d>
\end_layout

\begin_layout Plain Layout

</geometry>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

</plask>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\family typewriter
axes
\family default
 attribute of means that we will use the 
\begin_inset Formula $xy$
\end_inset

 axes in our geometry definition i.
\begin_inset space \thinspace{}
\end_inset

e.
 
\begin_inset Formula $x$
\end_inset

 is the name of the horizontal axis and 
\begin_inset Formula $y$
\end_inset

 of the vertical one.
 As the structure has mirror symmetry in the 
\begin_inset Formula $x$
\end_inset

-direction, it is sufficient to model only half of it and the left edge
 of the computational domain is the mirror, which is indicated by the 
\family typewriter
left="mirror"
\family default
 attribute.
 The last attribute 
\family typewriter
name
\family default
 simply gives the geometry name (
\begin_inset Quotes eld
\end_inset


\family typewriter
main
\family default

\begin_inset Quotes erd
\end_inset

) for later reference.
\end_layout

\begin_layout Standard
Due to the nature of the structure, it is the most natural to describe it
 as a stack of layers.
 Each layer is shifted to the left side of the stack (i.
\begin_inset space \thinspace{}
\end_inset

e.
 to the symmetry plane), which is a default.
 Hence, the structure definition will be (from now on we will skip 
\family typewriter
<plask>
\family default
â¦
\family typewriter
</plask>
\family default
 main tag from listings, although you must remember to keep them in your
 file):
\begin_inset listings
lstparams "language=XML"
inline false
status open

\begin_layout Plain Layout

<geometry>
\end_layout

\begin_layout Plain Layout

  <cartesian2d axes="xy" left="mirror" name="main">
\end_layout

\begin_layout Plain Layout

    <stack shift="-3000">
\end_layout

\begin_layout Plain Layout

      <block x="1.5" y="1.350" material="Al(0.3)GaAs:C=1e20 name="top-layer""/>
\end_layout

\begin_layout Plain Layout

      <block x="150" y="0.150" material="Al(0.3)GaAs:C=1e20"/>
\end_layout

\begin_layout Plain Layout

      <block x="150" y="0.150" material="GaAs"/>
\end_layout

\begin_layout Plain Layout

      <block x="150" y="0.007" material="In(0.2)GaAs" role="active"/>
\end_layout

\begin_layout Plain Layout

      <block x="150" y="0.150" material="GaAs"/>
\end_layout

\begin_layout Plain Layout

      <block x="150" y="0.150" material="Al(0.3)GaAs:Si=5e19"/>
\end_layout

\begin_layout Plain Layout

      <block x="150" y="1.500" material="GaAs:Si=5e19" name="substrate"/>
\end_layout

\begin_layout Plain Layout

      <block x="5000" y="3000" material="Cu"/>
\end_layout

\begin_layout Plain Layout

    </stack>
\end_layout

\begin_layout Plain Layout

  </cartesian2d>
\end_layout

\begin_layout Plain Layout

</geometry>
\end_layout

\end_inset

In the above listing, two new tags appeared.
 One is 
\family typewriter
<stack>
\family default
 and means that its whole content should be organized in the vertical stack,
 starting from top to bottom.
 By default, the stack coordinate system is set in a such way that 
\begin_inset Formula $y=0$
\end_inset

 is at the bottom of the stack.
 However, we want to have 
\begin_inset Formula $y=0$
\end_inset

, at the top of the heatsink, so we shift the whole stack (or in other words
 set its base level) to â3000
\begin_inset space \thinspace{}
\end_inset

Âµm.
 At this point it is important to say that PLaSK uses fixed units for all
 physical quantities and they are summarized in Appendix
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Units-in-PLaSK"

\end_inset

.
 For example all spatial dimensions must be given in micrometers, as this
 matches the typical dimensions of most photonic devices.
\end_layout

\begin_layout Standard
Another new tag is 
\family typewriter
<block>
\family default
, which means a rectangular block.
 As this tag has no further content, is is finished with 
\family typewriter
/>
\family default
.
 
\family typewriter
x
\family default
 and 
\family typewriter
y
\family default
 attributes give dimensions of the blocks.
 Their positions is determined automatically to form a compact left-aligned
 stack.
 As different layers have different widths, the empty space will be automaticall
y filled with air to form a rectangular computational domain
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Actually this is true only for rectangular meshes.
 There are special mesh types in PLaSK, which can skip empty areas from
 computations.
\end_layout

\end_inset

.
 Attribute 
\family typewriter
material
\family default
 gives information about the material of each block.
 As there is no 
\family typewriter
materials
\family default
 section in our input file, the material parameters will be taken from default
 database (more on this in chapter
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Materials"

\end_inset

).
 The value of this attribute contains the name of the material, composition
 of tertiary compounds and doping information.
 For example 
\family typewriter
Al(0.3)GaAs:C=1e20
\family default
 means Al
\begin_inset Formula $_{0.3}$
\end_inset

Ga
\begin_inset Formula $_{0.7}$
\end_inset

As (missing amount of gallium is computed automatically) doped with carbon
 and dopant concentration 
\begin_inset Formula $1\!\times\!10^{20}\,\mathrm{cm}^{-3}$
\end_inset

 (doping concentration is always given in 
\begin_inset Formula $\mathrm{cm}^{-3}$
\end_inset

).
\end_layout

\begin_layout Standard
Two of the blocks are given names 
\begin_inset Quotes eld
\end_inset


\family typewriter
top-layer
\family default

\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset


\family typewriter
substrate
\family default

\begin_inset Quotes erd
\end_inset

 for the future reference.
 They will be used to specify boundary conditions for the electrical solver
 at the edges of these blocks.
\end_layout

\begin_layout Standard
You might have also noticed another attribute 
\family typewriter
role="active"
\family default
 in one of the blocks.
 This is an information for the phenomenological electrical solver, which
 we are going to use for this structure, that the marked object is the active
 layer and the voltage drop on this layer should be computed using the diode
 equation instead on the Ohm's law.
 In general 
\family typewriter
role
\family default
 attributes can be used to provide additional information about the roles
 of some objects (or groupsâthe role could be given to the whole stack if
 desired) and are interpreted by solvers.
 You should refer to the particular solver documentation for the details
 of what roles should be given to what objects.
\end_layout

\begin_layout Subsection*
Mesh definition
\end_layout

\begin_layout Standard
Having the analyzed structure geometry defined, we must put the 
\family typewriter
<grids>
\family default
 section.
 Its content strongly depends on the solvers we are going to use.
 As we plan to perform thermo-electrical calculations, we choose basic thermal
 solver 
\family typewriter
thermal.Static2D
\family default
 and phenomenological electrical solver 
\family typewriter
electrical.Beta2D
\family default
.
 Details of this solvers are presented in chapter
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Solvers"

\end_inset

.
 For now it is important that both of them require user-provided rectilinear
 mesh, so we define a generator for such mesh in the 
\family typewriter
grids
\family default
 section.
\end_layout

\begin_layout Standard
In PLaSK user-defined meshes can be specified in two ways.
 First of all, you can simple give the points of the mesh yourself, although
 such approach is cumbersome and usually does not result in optimal computationa
l mesh.
 However, specifying own grid can be useful for creating plots of the computed
 fields, as it will be shown later in this tutorial.
 On the other hand, PLaSK offers 
\emph on
mesh generators
\emph default
, which can create a mesh matching certain criteria and based on the structure
 geometry.
 They are the most convenient way to make a computational mesh.
\end_layout

\begin_layout Standard
For our purpose we will use simple, but surprisingly powerful generator
 of two-dimensional rectilinear mesh called 
\emph on
DivideGenerator
\emph default
.
 It divides the structure along the edges of all geometrical objects and
 then subdivides such crude cells into smaller ones according to the user
 wish and additionally taking care that two adjacent mesh elements do not
 differ more than twice in a size along each dimension.
\end_layout

\begin_layout Standard
The generator definition in XPL file is done using 
\family typewriter
<generator>
\family default
 tag and looks as follows (put the 
\family typewriter
<grids>
\family default
 section between 
\family typewriter
</geometry>
\family default
 and 
\family typewriter
</plask>
\family default
):
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<grids>
\end_layout

\begin_layout Plain Layout

  <generator type="rectilinear2d" method="divide" name="default">
\end_layout

\begin_layout Plain Layout

    <postdiv by="2"/>
\end_layout

\begin_layout Plain Layout

  </generator>
\end_layout

\begin_layout Plain Layout

</grids>
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Here we have defined the generator for 
\begin_inset Quotes eld
\end_inset


\family typewriter
rectilinear2d
\family default

\begin_inset Quotes erd
\end_inset

 mesh using 
\begin_inset Quotes eld
\end_inset


\family typewriter
divide
\family default

\begin_inset Quotes erd
\end_inset


\emph on
 
\emph default
method (i.e.
 described 
\emph on
DivideGenerator
\emph default
).
 We will refer to this generator later on using the specified name 
\begin_inset Quotes eld
\end_inset

default
\begin_inset Quotes erd
\end_inset

.
 As in solver configuration the meshes and generators are indistinguishable
 by the type, each of them must have unique name.
\end_layout

\begin_layout Standard
The 
\family typewriter
<postdiv>
\family default
 tag is the generator configuration (for more details see chapter
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Meshes"

\end_inset

) and says that, after ensuring that two adjacent cells do not differ more
 than twice in size, each mesh element should be divided 
\family typewriter
by
\family default
 2 along each axis (i.
\begin_inset space \thinspace{}
\end_inset

e.
 into four quarters).
 The fact that our structure has both very thick and very thin layers and
 that we have used 
\emph on
DivideGenerator
\emph default
 makes the manual final mesh division by two sufficient.
 Later on we may plot the resulted mesh and fine-tune the 
\begin_inset Quotes eld
\end_inset


\family typewriter
postdiv
\begin_inset space \thinspace{}
\end_inset

by
\family default

\begin_inset Quotes eld
\end_inset

 value in the XPL file, add more configuration parameters (we will do this
 in the next tutorial), or even automatically tune the generator from the
 Python script.
\end_layout

\begin_layout Subsection*
Computational solvers
\end_layout

\begin_layout Standard
As the structure geometry and the mesh generator is defined, it is time
 to create computational solvers.
 As mentioned earlier, we use 
\family typewriter
thermal.Static2D
\family default
 for thermal modeling (i.
\begin_inset space \thinspace{}
\end_inset

e.
 computing the temperature distribution) and 
\family typewriter
electrical.Beta2D
\family default
 to determine the current flow.
 As, on the one hand, the temperature affects the material parameters (electrica
l conductivity in particular) and, on the other hand, the current flow is
 the source of the Joules heat, we will need to run both solvers in self-consist
ent loop, ensuring the mutual exchange of data.
 By now however, let us create the solvers.
 It is done in 
\family typewriter
<solvers>
\family default
 section, which should immediately follow 
\family typewriter
</grids>
\family default

\begin_inset Foot
status collapsed

\begin_layout Plain Layout
You can naturally put some blank lines and comments between each section,
 to make your file easier to read.
\end_layout

\end_inset

.
 Let us start with thermal solver:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<solvers>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  <thermal solver="Static2D" name="therm">
\end_layout

\begin_layout Plain Layout

    <geometry ref="main"/>
\end_layout

\begin_layout Plain Layout

    <mesh ref="default"/>
\end_layout

\begin_layout Plain Layout

    <temperature>
\end_layout

\begin_layout Plain Layout

      <condition value="300.0" place="bottom"/>
\end_layout

\begin_layout Plain Layout

    </temperature>
\end_layout

\begin_layout Plain Layout

  </thermal>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The tag name in the solvers section specified the type of the solver and
 the 
\family typewriter
solver
\family default
 attribute its particular type.
 So in the example above we have created the 
\family typewriter
thermal.Static2D
\family default
 solver and named it 
\family typewriter
THERMAL
\family default
.
 This solver will be visible as a variable in the Python script and its
 name will be exactly the name specified here in the attribute 
\family typewriter
name
\family default
.
 Hence, the value of this attribute must be a proper identifier i.
\begin_inset space \thinspace{}
\end_inset

e.
 must begin with a letter and contain only letters (lower or capital), digits
 and '_' character.
\end_layout

\begin_layout Standard
The content of the 
\family typewriter
<thermal>
\family default
 tag specifies the configuration of the 
\family typewriter
thermal.Static2D
\family default
 solver.
 Tags 
\family typewriter
<geometry>
\family default
 and 
\family typewriter
<mesh>
\family default
 specify the geometry and mesh or mesh generator used for computations.
 The values 
\family typewriter
ref
\family default
 attributes must match the names given particular geometry and mesh in the
 earlier sections.
 The role of the 
\family typewriter
<temperature>
\family default
 tag is to provide constant-temperature boundary conditions.
 In this case, we have set 300
\begin_inset space \thinspace{}
\end_inset

K at the bottom of the whole analyzed structure (i.
\begin_inset space \thinspace{}
\end_inset

e.
 at the bottom of the copper heatsink).
\end_layout

\begin_layout Standard
The other solver we use is 
\family typewriter
electrical.Beta2D
\family default
.
 Its configuration is very similar to the above one:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

  <electrical solver="Beta2D" name="electr">
\end_layout

\begin_layout Plain Layout

    <geometry ref="main"/>
\end_layout

\begin_layout Plain Layout

    <mesh ref="default"/>
\end_layout

\begin_layout Plain Layout

    <voltage>
\end_layout

\begin_layout Plain Layout

      <condition value="1.0">
\end_layout

\begin_layout Plain Layout

        <place object="top-layer" side="top"/>
\end_layout

\begin_layout Plain Layout

      </condition>
\end_layout

\begin_layout Plain Layout

      <condition value="0.0">
\end_layout

\begin_layout Plain Layout

        <place object="substrate" side="bottom"/>
\end_layout

\begin_layout Plain Layout

      </condition>
\end_layout

\begin_layout Plain Layout

    </voltage>
\end_layout

\begin_layout Plain Layout

  </electrical>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

</solvers>
\end_layout

\end_inset

Here we have two boundary conditions, specifying electric potential (voltage)
 at the top side of the object named 
\begin_inset Quotes eld
\end_inset

top-layer
\begin_inset Quotes erd
\end_inset

 (1
\begin_inset space \thinspace{}
\end_inset

V) and at the bottom side of the 
\begin_inset Quotes eld
\end_inset

substrate
\begin_inset Quotes erd
\end_inset

 (0
\begin_inset space \thinspace{}
\end_inset

V).
 Take a look at the geometry section to see which objects are these.
 As the definition of the location of boundary conditions is not a single
 word, we had to use the separate tag 
\family typewriter
<place>
\family default
 as a content of the 
\family typewriter
<condition>
\family default
 tag instead of its 
\family typewriter
place
\family default
 attribute.
 If you wonder why we could not simple specify 1
\begin_inset space \thinspace{}
\end_inset

V potential at the top of the whole structure similarly as it was done for
 thermal solver, notice that the top layer has width of only 1.5
\begin_inset space \thinspace{}
\end_inset

Âµm and there is 4998.5
\begin_inset space \thinspace{}
\end_inset

Âµm of air adjacent to it.
 You would not want to put voltage to the air.
\end_layout

\begin_layout Standard
Once the solvers are created, you have to connect them.
 In PLaSK data between solvers is exchanged using a system of 
\emph on
providers
\emph default
 and 
\emph on
receivers
\emph default
.
 For example thermal solver have temperature provider called 
\family typewriter
outTemperature
\family default
 and any other solver has receiver 
\family typewriter
inTemperature
\family default
.
 By connecting them in the 
\family typewriter
<connects>
\family default
 section of the XPL file, we can ensure that each time the other solver
 (in our case this will be 
\family typewriter
electrical.Beta2D
\family default
 that we named 
\emph on
electr
\emph default
) requires temperature distribution, e.
\begin_inset space \thinspace{}
\end_inset

g.
 in order to consider the temperature dependence of the material electrical
 conductivity, its recently computed value will be provided automatically.
 On the other hand, in order to perform the computations, the thermal solver
 needs distribution of Joule's heat density, which can be similarly provided
 by the electrical solver.
 Hence, we need to define the 
\family typewriter
<connects>
\family default
 section that follow solvers definition:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<connects>
\end_layout

\begin_layout Plain Layout

  <connect in="electr.inTemperature" out="therm.outTemperature"/>
\end_layout

\begin_layout Plain Layout

  <connect in="therm.inHeatDensity" out="electr.outHeatDensity"/>
\end_layout

\begin_layout Plain Layout

</connects>
\end_layout

\end_inset

Receiver specification is always 
\family typewriter
\emph on
solver_name.inReceivedQuantity
\family default
\emph default
, where 
\emph on
solver_name
\emph default
 is the name we have given the solver in the 
\family typewriter
<solvers>
\family default
 section.
 Similarly providers are named 
\family typewriter
\emph on
solver_name.outProvidedQuantity
\family default
\emph default
.
 Receivers and providers always have names prefixed 
\family typewriter
in
\family default
 and 
\family typewriter
out
\family default
 in order to easily distinguish them.
 The complete list of the providers and receives available in each solver
 is presented in chapter
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Solvers"

\end_inset

.
\end_layout

\begin_layout Standard
After you have specified the above connections, bi-directional data exchange
 between the solvers will be done automatically and you need not worry about
 it during your calculations.
 If you want, you may connect a single provider with multiple receivers,
 however, not the opposite.
 Also, PLaSK will report an error if you try to connect providers and receivers
 of the incompatible type (e.
\begin_inset space \thinspace{}
\end_inset

g.
 
\family typewriter
inTemperature
\family default
 and 
\family typewriter
outHeatDensity
\family default
).
\end_layout

\begin_layout Subsection*
Running computations
\end_layout

\begin_layout Standard
At this point, you have prepared all the data needed to perform thermo-electrica
l analysis of the sample device.
 Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:listing-of-tutorial1.xpl"

\end_inset

 shows the review of what we have created so far.
 The only missing part is the 
\family typewriter
<script>
\family default
 section, which should be the last section of the file.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "float=p,language=XML"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:listing-of-tutorial1.xpl"

\end_inset

Listing of 
\family typewriter
tutorial1.xpl
\family default
 without the script section.
\end_layout

\end_inset

<plask>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

<geometry>
\end_layout

\begin_layout Plain Layout

  <cartesian2d axes="xy" left="mirror" name="main">
\end_layout

\begin_layout Plain Layout

    <stack shift="-3000">
\end_layout

\begin_layout Plain Layout

      <block x="1.5" y="1.350" material="Al(0.3)GaAs:C=1e20" name="top-layer"/>
\end_layout

\begin_layout Plain Layout

      <block x="150" y="0.150" material="Al(0.3)GaAs:C=1e20"/>
\end_layout

\begin_layout Plain Layout

      <block x="150" y="0.150" material="GaAs"/>
\end_layout

\begin_layout Plain Layout

      <block x="150" y="0.007" material="In(0.2)GaAs" role="active"/>
\end_layout

\begin_layout Plain Layout

      <block x="150" y="0.150" material="GaAs"/>
\end_layout

\begin_layout Plain Layout

      <block x="150" y="0.150" material="Al(0.3)GaAs:Si=5e19" name="substrate"/>
\end_layout

\begin_layout Plain Layout

      <block x="150" y="1.500" material="GaAs:Si=5e19"/>
\end_layout

\begin_layout Plain Layout

      <block x="5000" y="3000" material="Cu"/>
\end_layout

\begin_layout Plain Layout

    </stack>
\end_layout

\begin_layout Plain Layout

  </cartesian2d>
\end_layout

\begin_layout Plain Layout

</geometry>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

<grids>
\end_layout

\begin_layout Plain Layout

  <generator type="rectilinear2d" method="divide" name="default">
\end_layout

\begin_layout Plain Layout

    <postdiv by="2"/>
\end_layout

\begin_layout Plain Layout

  </generator>
\end_layout

\begin_layout Plain Layout

  <generator type="rectilinear2d" method="divide" name="plots">
\end_layout

\begin_layout Plain Layout

    <postdiv by="10"/>
\end_layout

\begin_layout Plain Layout

  </generator>
\end_layout

\begin_layout Plain Layout

</grids>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

<solvers>
\end_layout

\begin_layout Plain Layout

  <thermal solver="Static2D" name="therm">
\end_layout

\begin_layout Plain Layout

    <geometry ref="main"/>
\end_layout

\begin_layout Plain Layout

    <mesh ref="default"/>
\end_layout

\begin_layout Plain Layout

    <temperature>
\end_layout

\begin_layout Plain Layout

      <condition value="300.0" place="bottom"/>
\end_layout

\begin_layout Plain Layout

    </temperature>
\end_layout

\begin_layout Plain Layout

  </thermal>
\end_layout

\begin_layout Plain Layout

  <electrical solver="Beta2D" name="electr">
\end_layout

\begin_layout Plain Layout

    <geometry ref="main"/>
\end_layout

\begin_layout Plain Layout

    <mesh ref="default"/>
\end_layout

\begin_layout Plain Layout

    <voltage>
\end_layout

\begin_layout Plain Layout

      <condition value="1.0">
\end_layout

\begin_layout Plain Layout

        <place object="top-layer" side="top"/>
\end_layout

\begin_layout Plain Layout

      </condition>
\end_layout

\begin_layout Plain Layout

      <condition value="0.0">
\end_layout

\begin_layout Plain Layout

        <place object="substrate" side="bottom"/>
\end_layout

\begin_layout Plain Layout

      </condition>
\end_layout

\begin_layout Plain Layout

    </voltage>
\end_layout

\begin_layout Plain Layout

  </electrical>
\end_layout

\begin_layout Plain Layout

</solvers>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

<connects>
\end_layout

\begin_layout Plain Layout

  <connect in="electr.inTemperature" out="therm.outTemperature"/>
\end_layout

\begin_layout Plain Layout

  <connect in="therm.inHeatDensity" out="electr.outHeatDensity"/>
\end_layout

\begin_layout Plain Layout

</connects>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

</plask>
\end_layout

\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Thermo-electrical-of-GaAs"

\end_inset

Thermo-electrical model of gallium-arsenide VCSEL
\end_layout

\begin_layout Section
Scalar optical modeling of simple rectangular waveguide
\end_layout

\begin_layout Section
Searching threshold gain of a step-profile VCSEL
\end_layout

\begin_layout Section
Searching threshold of a real gallium nitride array
\end_layout

\begin_layout Part
\begin_inset CommandInset label
LatexCommand label
name "part:PLaSK-reference-manual"

\end_inset

PLaSK reference manual
\end_layout

\begin_layout Chapter
General concepts of PLaSK
\end_layout

\begin_layout Chapter
Geometry specification
\end_layout

\begin_layout Section
Specifying geometry in XPL file
\end_layout

\begin_layout Section
Creating geometry from Python
\end_layout

\begin_layout Section
Reference of geometry objects
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:Materials"

\end_inset

Managing Materials
\end_layout

\begin_layout Section
Materials in PLaSK
\end_layout

\begin_layout Section
Compiled material libraries
\end_layout

\begin_layout Section
Custom material class in Python
\end_layout

\begin_layout Section
Custom materials in XPL
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:Meshes"

\end_inset

Specifying meshes
\end_layout

\begin_layout Section
Concept of meshes and generators
\end_layout

\begin_layout Section
Rectangular meshes
\end_layout

\begin_layout Section
Triangular meshes
\end_layout

\begin_layout Section
Other meshes
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:Solvers"

\end_inset

Computational solvers
\end_layout

\begin_layout Section
Solvers overview
\end_layout

\begin_layout Section
Specifying solvers in XPL file
\end_layout

\begin_layout Section
Creating and managing solvers from Python
\end_layout

\begin_layout Section
Running computations
\end_layout

\begin_layout Chapter
Other useful utilities
\end_layout

\begin_layout Section
Creating plots of the results
\end_layout

\begin_layout Section
Storing and retrieving results
\end_layout

\begin_layout Part
Graphical User Interface
\end_layout

\begin_layout Part
Available solvers
\end_layout

\begin_layout Chapter
Thermal model
\end_layout

\begin_layout Chapter
Electrical model
\end_layout

\begin_layout Chapter
Gain model
\end_layout

\begin_layout Chapter
Optical model
\end_layout

\begin_layout Chapter
Strain model
\end_layout

\begin_layout Chapter
Dynamic models
\end_layout

\begin_layout Chapter
\start_of_appendix
\begin_inset CommandInset label
LatexCommand label
name "chap:Units-in-PLaSK"

\end_inset

Units in PLaSK
\end_layout

\begin_layout Chapter
Formal specification of the XPL file
\end_layout

\begin_layout Chapter
Reference of the Python library
\end_layout

\begin_layout Chapter
Typical usage scenarios
\end_layout

\end_body
\end_document
