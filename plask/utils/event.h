#ifndef PLASK__UTILS_EVENT_H
#define PLASK__UTILS_EVENT_H

/** @file
This file includes utils for events types.
*/

/**
 * Base class for classes which store information about event generated by objects of type @p SourceType.
 *
 * It includes flags field which describes additional event properties.
 * Subclasses of subclasses of this can also includes additional information about specific type of event.
 */
template <typename SourceType, typename FlagsType = unsigned char>
class EventWithSourceAndFlags {

    /// Source of event.
    SourceType& _source;

    /// Event flags (which describes event properties).
    FlagsType _flags;

public:

    /**
     * Get source of event.
     * @return source of event
     */
    const SourceType& source() const { return _source; }

    /**
     * Get source of event.
     * @return source of event
     */
    SourceType& source() { return _source; }

    /**
     * Get source of event casted (using dynamic_cast) to given type T.
     * @return source of event as T
     * @tparam T required type
     */
    template <typename T>
    const T& source() const { return dynamic_cast<const T&>(source()); }

    /**
     * Get source of event casted (using dynamic_cast) to given type T.
     * @return source of event as T
     * @tparam T required type
     */
    template <typename T>
    T& source() { return dynamic_cast<T&>(source()); }

    /**
     * Get event's flags.
     * @return flags which describes event's properties
     */
    FlagsType flags() const { return _flags; }

    /**
     * Get event's flags with excluded @p flagsToRemove.
     * @param flagsToRemove flags to exclude from result
     * @return flags which describes event properties without @p flagsToRemove
     */
    FlagsType flagsWithout(FlagsType flagsToRemove) const { return _flags & ~flagsToRemove; }

    /**
     * Check if given all of @p flags are set.
     * @param flags flags to check
     * @return @c true only if all of @p flags are set
     */
    bool hasAllFlags(FlagsType flags) const { return (_flags & flags) == flags; }

    /**
     * Check if one of given @p flags are set.
     * @param flags flags to check
     * @return @c true only if one or more of @p flags are set
     */
    bool hasAnyFlag(FlagsType flags) const { return _flags & flags; }

    /**
     * Construct event.
     * @param source source of event
     * @param flags falgs which describes event's properties
     */
    explicit EventWithSourceAndFlags(SourceType& source, FlagsType flags = 0): _source(source), _flags(flags) {}

    /// Virtual destructor for eventual subclassing
    virtual ~EventWithSourceAndFlags() {}

};

#endif // PLASK__UTILS_EVENT_H
