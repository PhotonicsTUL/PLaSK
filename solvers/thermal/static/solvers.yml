- solver: Static2D
  lib: static
  category: thermal
  help: >
    Two-dimensional static thermal solver in Cartesian geometry, based on finite-element method.

  geometry: Cartesian2D

  tags:
    - &mesh
      tag: mesh
      label: Mesh
      help: >
        Rectangular2D mesh used by this solver.
      attrs:
        - attr: ref
          label: Mesh
          required: true
          type: mesh
          mesh types: [Rectangular2D]
          help: >
            Name of a Rectangular2D mesh defined in the :xml:tag:`<grids>` section.
        - &full-mesh
          attr: include-empty
          label: Include Empty Regions
          type: bool
          default: no
          help: >
            Should empty regions (e.g. air) be included into computation domain?

    - &temperature
      bcond: temperature
      label: Temperature
      mesh type: Rectangular2D
      mesh: { tag: mesh, attr: ref }

    - &heatflux
      bcond: heatflux
      label: Heat Flux
      mesh type: Rectangular2D
      mesh: { tag: mesh, attr: ref }

    - &convection
      bcond: convection
      label: Convective
      mesh type: Rectangular2D
      mesh: { tag: mesh, attr: ref }
      values: [coeff, ambient]
      help: >
        This boundary condition does not have <i>value</i> attribute. Use <i>coeff</i> for convection
        coefficient and <i>ambient</i> for ambient temperature instead.

    - &radiation
      bcond: radiation
      label: Radiative
      mesh type: Rectangular2D
      mesh: { tag: mesh, attr: ref }
      values: [emissivity, ambient]
      help: >
        This boundary condition does not have <i>value</i> attribute. Use <i>emissivity</i> for surface
        emissivity and <i>ambient</i> for ambient temperature instead.

    - &loop
      tag: loop
      label: Self-Consistent Loop
      help: >
        Configuration of the self-consistent loop.
      attrs:
        - attr: inittemp
          label: Initial temperature
          type: float
          unit: K
          default: 300
          help: >
            Initial temperature used for the first computation.
        - attr: maxerr
          label: Maximum allowed error
          type: float
          unit: K
          default: 0.05
          help: >
            Maximum allowed error in a self-consistent loop.

    - !include &matrix { $file: fem.yml }

  providers: &providers
    - outTemperature
    - outHeatFlux
    - outThermalConductivity

  receivers: &receivers
    - inHeat

################################################################################

- solver: StaticCyl
  lib: static
  category: thermal
  help: >
    Two-dimensional static thermal solver in cylindrical geometry, based on finite-element method.

  geometry: Cylindrical

  tags:
    - *mesh

    - *temperature

    - *heatflux

    - *convection

    - *radiation

    - *loop

    - *matrix

  providers: *providers

  receivers: *receivers

################################################################################

- solver: Static3D
  lib: static
  category: thermal
  help: >
    Three-dimensional static thermal solver based on finite-element method.

  geometry: Cartesian3D

  tags:
    - tag: mesh
      label: Mesh
      help: >
        Rectangular3D mesh used by this solver.
      attrs:
        - attr: ref
          label: Mesh
          required: true
          type: mesh
          mesh types: [Rectangular3D]
          help: >
            Name of a Rectangular3D mesh defined in the :xml:tag:`<grids>` section.
        - *full-mesh

    - bcond: temperature
      label: Temperature
      mesh type: Rectangular3D
      mesh: { tag: mesh, attr: ref }

    - bcond: heatflux
      label: Heat Flux
      mesh type: Rectangular3D
      mesh: { tag: mesh, attr: ref }

    - bcond: convection
      label: Convective
      mesh type: Rectangular3D
      mesh: { tag: mesh, attr: ref }
      values: [coeff, ambient]
      help: >
        This boundary condition does not have <i>value</i> attribute. Use <i>coeff</i> for convection
        coefficient and <i>ambient</i> for ambient temperature instead.

    - bcond: radiation
      label: Radiative
      mesh type: Rectangular3D
      mesh: { tag: mesh, attr: ref }
      values: [emissivity, ambient]
      help: >
        This boundary condition does not have <i>value</i> attribute. Use <i>emissivity</i> for surface
        emissivity and <i>ambient</i> for ambient temperature instead.

    - *loop

    - !include
      $file: fem.yml
      $update:
        - $path: [attrs, 0, default]
          $value: iterative

  providers: *providers

  receivers: *receivers
