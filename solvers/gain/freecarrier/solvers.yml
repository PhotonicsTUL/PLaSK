- solver: FreeCarrier2D
  lib: freecarrier
  category: gain
  help: >
    Quantum-well gain using free-carrier approximation for two-dimensional Cartesian geometry.

    This solver does not use any mesh by default and the the full gain calculation is performed in each requested point.
    However, if there is a mesh specified then the gain is computed only in the mesh points and interpolated in-between.

  geometry: Cartesian2D
  mesh: [ Ordered, Regular ]
  need mesh: false

  tags:
  - &config
    tag: config
    label: Gain Parameters
    help: Some important gain parameters.
    attrs:
    - attr: lifetime
      label: Carriers lifetime
      type: float
      unit: ps
      default: 0.1
      help: Average carriers lifetime. This parameter is used for gain spectrum broadening.
    - attr: matrix-elem
      label: Momentum matrix element
      type: float
      unit: eVÃ—m<sub>0</sub>
      help: Value of the squared matrix element in gain computations. If it is not set it is estimated automatically.
    - attr: strained
      label: Strained
      type: bool
      default: false
      help: Boolean attribute indicating if the solver should consider strain in the active region. If set
        to <i>yes</i> then there must a layer with the role "<i>substrate</i>" in the geometry. The strain
        is computed by comparing the atomic lattice constants of the substrate and the quantum wells.
    - attr: T0
      label: Reference temperature
      type: float
      unit: K
      default: 300
      help: Reference temperature. This is the temperature used for initial computation of the energy levels.

  providers: &providers
  - outGain
  - outEnergyLevels

  receivers: &receivers
  - inTemperature
  - inCarriersConcentration
  - inFermiLevels
  - inBandEdges

###########################################################################################

- solver: FreeCarrierCyl
  lib: freecarrier
  category: gain
  help: >
    Quantum-well gain using free-carrier approximation for cylindrical geometry.

    This solver does not use any mesh by default and the the full gain calculation is performed in each requested point.
    However, if there is a mesh specified then the gain is computed only in the mesh points and interpolated in-between.

  geometry: Cylindrical
  mesh: [ Ordered, Regular ]
  need mesh: false

  tags:
  - *config

  providers: *providers

  receivers: *receivers

###########################################################################################

- solver: FreeCarrier3D
  lib: freecarrier
  category: gain
  help: >
    Quantum-well gain using free-carrier approximation for three-dimensional Cartesian geometry.

    This solver does not use any mesh by default and the the full gain calculation is performed in each requested point.

  geometry: Cartesian3D

  tags:
  - *config

  providers: *providers

  receivers: *receivers
