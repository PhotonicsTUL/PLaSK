- solver: Shockley2D
  lib: shockley
  category: electrical
  help: >
    Two-dimensional phenomenological solver in Cartesian geometry based on Shockley equation
    and using finite-element method.
  geometry: Cartesian2D
  tags:
    - &mesh
      tag: mesh
      label: Mesh
      help: >
        Rectangular2D mesh used by this solver.
      attrs:
        - attr: ref
          label: Mesh
          required: true
          type: mesh
          mesh types: [Rectangular2D]
          help: >
            Name of a Rectangular2D mesh defined in the :xml:tag:`<grids>` section.
        - &full-mesh
          attr: empty-elements
          label: Empty elements
          type: choice
          choices: [ default, include, exclude ]
          default: default
          help: >
            Should empty regions (e.g. air) be included into electrical computations?
    - &voltage
      bcond: voltage
      label: Voltage
      mesh type: Rectangular2D
      mesh: { tag: mesh, attr: ref }
    - &loop
      tag: loop
      label: Configuration of the Self-Consistent Loop
      help: Configuration of the self-consistent loop.
      attrs:
        - attr: maxerr
          label: Maximum current density error
          type: float
          unit: "%"
          default: 0.05
          help: Maximum allowed current density error.
        - group: Initial active conductivity
          attrs:
            - attr: start-cond
              label: Vertical
              type: float
              unit: S/m
              default: 5.0
              help: Initial vertical conductivity of all active regions.
            - attr: start-cond-inplane
              label: In-plane
              type: float
              unit: S/m
              default: 0.0
              help: Initial in-plane conductivity of all active regions.
        - attr: convergence
          label: Convergence method
          type: choice
          default: fast
          choices:
            - fast
            - stable
          help: Convergence method. If <tt>stable</tt>, convergence is slowed down to ensure stability.
    - !include &matrix { $file: fem.yml }
    - &junction
      tag: junction
      label: Configuration of the Effective Model of p-n Junction
      help: Configuration of the effective model of p-n junction.
      attrs:
        - attr: beta#
          label: Junction coefficients<br/>(one per line)
          type: float
          unit: 1/V
          help: Junction coefficients. This is an inverse of the junction thermal voltage.
        - attr: js#
          label: Reverse bias current densities<br/>(one per line)
          type: float
          unit: A/m<sup>2</sup>
          help: Reverse bias current densities.
    - &contacts
      tag: contacts
      label: Properties of the Contacts
      help: Properties of the contact layers.
      attrs:
        - attr: pcond
          label: p-contact conductivity
          type: float
          unit: S/m
          default: 5.0
          help: p-contact conductivity.
        - attr: ncond
          label: n-contact conductivity
          type: float
          unit: S/m
          default: 50.0
          help: n-contact conductivity.
  providers: &providers
    - outVoltage
    - outCurrentDensity
    - outHeat
    - outConductivity
  receivers: &receivers
    - inTemperature

- solver: ShockleyCyl
  lib: shockley
  category: electrical
  help: >
    Two-dimensional phenomenological solver in cylindrical geometry based on Shockley equation
    and using finite-element method.
  geometry: Cylindrical
  tags:
    - *mesh
    - *voltage
    - *loop
    - *matrix
    - *junction
    - *contacts
  providers: *providers
  receivers: *receivers

- solver: Shockley3D
  lib: shockley
  category: electrical
  help: >
    Three-dimensional phenomenological solver in Cartesian geometry based on Shockley equation
    and using finite-element method.
  geometry: Cartesian3D
  tags:
    - tag: mesh
      label: Mesh
      help: >
        Rectangular3D mesh used by this solver.
      attrs:
        - attr: ref
          label: Mesh
          required: true
          type: mesh
          mesh types: [Rectangular3D]
          help: >
            Name of a Rectangular3D mesh defined in the :xml:tag:`<grids>` section.
        - *full-mesh
    - bcond: voltage
      label: Voltage
      mesh type: Rectangular3D
      mesh: { tag: mesh, attr: ref }
    - *loop
    - !include
      $file: fem.yml
      $update:
        - $path: [attrs, 0, default]
          $value: iterative
    - *junction
    - *contacts
  providers: *providers
  receivers: *receivers

- solver: ActiveCond2D
  lib: shockley
  category: electrical
  help: >
    Two-dimensional phenomenological solver in Cartesian geometry based on custom active region conductivity
    and using finite-element method. To use this solver, you must create a Python function taking the junction voltage,
    current density and temperature as arguments and returning junction conductivity. The returned value must be either
    a dwo-dimensional tensor or a single value, in which case the conductivity is assumed to be zero in lateral direction.
    Next, you must assign this function to the `cond` (or `cond0`, `cond1` etc. for multiple active regions) of the solver.

    Example:
        >>> solver.cond = lambda U, jy, T: 5.0
  geometry: Cylindrical
  tags:
    - *mesh
    - *voltage
    - *loop
    - *matrix
    - *contacts
  providers: *providers
  receivers: *receivers

- solver: ActiveCondCyl
  lib: shockley
  category: electrical
  help: >
    Two-dimensional phenomenological solver in cylindrical geometry based on custom active region conductivity
    and using finite-element method. To use this solver, you must create a Python function taking the junction voltage,
    current density and temperature as arguments and returning junction conductivity. The returned value must be either
    a dwo-dimensional tensor or a single value, in which case the conductivity is assumed to be zero in lateral direction.
    Next, you must assign this function to the `cond` (or `cond0`, `cond1` etc. for multiple active regions) of the solver.

    Example:
        >>> solver.cond = lambda U, jz, T: 5.0
  geometry: Cylindrical
  tags:
    - *mesh
    - *voltage
    - *loop
    - *matrix
    - *contacts
  providers: *providers
  receivers: *receivers

- solver: ActiveCond3D
  lib: shockley
  category: electrical
  help: >
    Three-dimensional phenomenological solver in Cartesian geometry based on custom active region conductivity
    and using finite-element method. To use this solver, you must create a Python function taking the juction voltage,
    current density and temperature as asguments and returning junction conductivity. The returned value must be either
    a dwo-dimensional tensor or a single value, in which case the conductivity is assumend to be zero in lateral direction.
    Next, you must assign this function to the `cond` (or `cond0`, `cond1` etc. for multiple active regions) of the solver.

    Example:
        >>> solver.cond = lambda U, jz, T: 5.0
  geometry: Cartesian3D
  tags:
    - tag: mesh
      label: Mesh
      help: >
        Rectangular3D mesh used by this solver.
      attrs:
        - attr: ref
          label: Mesh
          required: true
          type: mesh
          mesh types: [Rectangular3D]
          help: >
            Name of a Rectangular3D mesh defined in the :xml:tag:`<grids>` section.
        - *full-mesh
    - bcond: voltage
      label: Voltage
      mesh type: Rectangular3D
      mesh: { tag: mesh, attr: ref }
    - *loop
    - *matrix
    - *contacts
  providers: *providers
  receivers: *receivers
